/*! sprintf.js | Copyright (c) 2007-2013 Alexandru Marasteanu <hello at alexei dot ro> | 3 clause BSD license */
/*  Support for variable width and precision added by Robert L Pyron (rpyron@alum.mit.edu) */
(function(ctx){var sprintf=function(){if(!sprintf.cache.hasOwnProperty(arguments[0])){sprintf.cache[arguments[0]]=sprintf.parse(arguments[0]);
}return sprintf.format.call(null,sprintf.cache[arguments[0]],arguments);};sprintf.format=function(parse_tree,argv){var cursor=1,tree_length=parse_tree.length,node_type="",arg,output=[],i,k,match,pad,pad_character,pad_length;
var left_align,field_width,precision;var expect_number=function(arg){if(get_type(arg)!="number"){throw (sprintf("[sprintf] expecting number but found %s",get_type(arg)));
}};for(i=0;i<tree_length;i++){node_type=get_type(parse_tree[i]);if(node_type==="string"){output.push(parse_tree[i]);}else{if(node_type==="array"){match=parse_tree[i];
if(match[2]){arg=argv[cursor];for(k=0;k<match[2].length;k++){if(!arg.hasOwnProperty(match[2][k])){throw (sprintf('[sprintf] property "%s" does not exist',match[2][k]));
}arg=arg[match[2][k]];}}else{if(match[1]){arg=argv[match[1]];}else{arg=argv[cursor++];}}left_align=match[5];field_width=match[6];
precision=match[7];if(field_width=="*"){expect_number(arg);field_width=parseInt(arg,10);if(field_width<0){left_align=match[5]="-";
field_width=-field_width;}arg=argv[cursor++];}if(precision=="*"){expect_number(arg);precision=parseInt(arg,10);if(precision<0){precision=null;
}arg=argv[cursor++];}if(/[^s]/.test(match[8])){expect_number(arg);}switch(match[8]){case"b":arg=arg.toString(2);break;case"c":arg=String.fromCharCode(arg);
break;case"d":arg=parseInt(arg,10);break;case"e":arg=precision?arg.toExponential(precision):arg.toExponential();break;case"f":arg=precision?parseFloat(arg).toFixed(precision):parseFloat(arg);
break;case"o":arg=arg.toString(8);break;case"s":arg=((arg=String(arg))&&precision?arg.substring(0,precision):arg);break;case"u":arg=arg>>>0;
break;case"x":arg=arg.toString(16);break;case"X":arg=arg.toString(16).toUpperCase();break;}arg=(/[def]/.test(match[8])&&match[3]&&arg>=0?"+"+arg:arg);
pad_character=match[4]?match[4]=="0"?"0":match[4].charAt(1):" ";pad_length=field_width-String(arg).length;pad=field_width?str_repeat(pad_character,pad_length):"";
output.push(left_align?arg+pad:pad+arg);}}}return output.join("");};sprintf.cache={};sprintf.parse=function(fmt){var _fmt=fmt,match=[],parse_tree=[],arg_names=0;
while(_fmt){if((match=/^[^\x25]+/.exec(_fmt))!==null){parse_tree.push(match[0]);}else{if((match=/^\x25{2}/.exec(_fmt))!==null){parse_tree.push("%");
}else{if((match=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\*|\d+)?(?:\.(\*|\d+))?([b-fosuxX])/.exec(_fmt))!==null){if(match[2]){arg_names|=1;
var field_list=[],replacement_field=match[2],field_match=[];if((field_match=/^([a-z_][a-z_\d]*)/i.exec(replacement_field))!==null){field_list.push(field_match[1]);
while((replacement_field=replacement_field.substring(field_match[0].length))!==""){if((field_match=/^\.([a-z_][a-z_\d]*)/i.exec(replacement_field))!==null){field_list.push(field_match[1]);
}else{if((field_match=/^\[(\d+)\]/.exec(replacement_field))!==null){field_list.push(field_match[1]);}else{throw ("[sprintf] huh?");
}}}}else{throw ("[sprintf] huh?");}match[2]=field_list;}else{arg_names|=2;}if(arg_names===3){throw ("[sprintf] mixing positional and named placeholders is not (yet) supported");
}parse_tree.push(match);}else{throw ("[sprintf] huh?");}}}_fmt=_fmt.substring(match[0].length);}return parse_tree;};var vsprintf=function(fmt,argv,_argv){_argv=argv.slice(0);
_argv.splice(0,0,fmt);return sprintf.apply(null,_argv);};function get_type(variable){return Object.prototype.toString.call(variable).slice(8,-1).toLowerCase();
}function str_repeat(input,multiplier){for(var output=[];multiplier>0;output[--multiplier]=input){}return output.join("");
}ctx.sprintf=sprintf;ctx.vsprintf=vsprintf;})(typeof exports!="undefined"?exports:window);
